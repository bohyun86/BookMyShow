<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.itwillbs.mapper.MusicalMapper">
<!-- <resultMap id="MusicalWithUserMap" type="com.itwillbs.domain.MusicalDTO"> -->
<!--     <association property="User" javaType="UserDTO"> -->
<!--         <result property="userName" column="user_name"/> -->
<!--     </association> -->
<!-- </resultMap> -->


    <select id="getMusical_Page" resultType="com.itwillbs.domain.MusicalMainDTO">
		SELECT 
		    m.musical_id,
		    m.title, 
		    FLOOR(m.discount_rate * 100) AS discount_rate, 
		    m.start_date,
		    g.genre_name,
		    a.file_name, 
		    a.uuid, 
		    a.upload_path,
		    v.venue_id,
		    r.region_name,
		    CONCAT(
		        SUBSTR(FLOOR(MIN(t.price) * (1 - m.discount_rate)), 1, 2),
		        ',',
		        SUBSTR(ROUND(MIN(t.price) * (1 - m.discount_rate), -2), -3, 4)
		    ) AS price,
		    IFNULL(w.review_count, 0) AS review_count,
		    IFNULL(w.rating, 0) AS rating
		FROM 
		    Musical m
		JOIN 
		    Genre g ON m.genre_id = g.genre_id
		JOIN 
		    AttachFile a ON m.musical_id = a.musical_id
		JOIN 
		    Venue v ON m.venue_id = v.venue_id  
		JOIN 
		    Region r ON v.region_id = r.region_id
		JOIN 
		    Performance p ON m.musical_id = p.musical_id
		JOIN 
		    TicketPrice t ON t.performance_id = p.performance_id
		LEFT JOIN (
		    SELECT 
		        musical_id, 
		        COUNT(review_id) AS review_count,
		        ROUND(AVG(rating), 1) AS rating
		    FROM 
		        Review
		    GROUP BY 
		        musical_id
		) w ON w.musical_id = m.musical_id
		WHERE 
		    a.is_poster = 1
		<if test="genreCheck != null">
			and g.genre_name = #{genreCheck}
			<if test="regionCheck != null">
				and r.region_name = #{region_name1}
				<if test="region_name2 != null">
					or r.region_name = #{region_name2}
					<if test="region_name3 != null">
						or r.region_name = #{region_name3}
						<if test="region_name4 != null">
							or r.region_name = #{region_name4}
						</if>
					</if>
				</if>
			</if>	
		</if>
		
		<if test="regionCheck != null">
			and r.region_name = #{region_name1}
			<if test="genreCheck != null">
				and g.genre_name = #{genreCheck}
			</if>
			<if test="region_name2 != null">
					or r.region_name = #{region_name2}
				<if test="region_name3 != null">
					or r.region_name = #{region_name3}
					<if test="region_name4 != null">
						or r.region_name = #{region_name4}
					</if>
				</if>
			</if>
		</if>    
		    
		GROUP BY 
		    m.musical_id, 
		    m.title, 
		    m.discount_rate, 
		    m.start_date,
		    g.genre_name,
		    a.file_name, 
		    a.uuid, 
		    a.upload_path,
		    v.venue_id,
		    r.region_name
		ORDER BY 
		<if test="reviewCheck != null">
			review_count desc,
		</if>
		<if test="ratingCheck != null">
			 rating desc,
		</if>
			m.start_date desc;
    </select>
    
      <!-- 뮤지컬 승인 상태 업데이트 -->
    <update id="updateMusicalApproval" >
     UPDATE Musical
SET approved = 1
WHERE title = #{title} AND approved = 0;
    </update>
   

   <!-- 파트너 ID로 뮤지컬 검색 -->
<!--    아이디로 검색 안됌 수정해야함 -->
    <select id="getMusicalByPartnerId" resultType="com.itwillbs.domain.MusicalDTO">
        SELECT  U.user_name, M.title
           FROM Partner P
       JOIN User U ON  P.user_id = U.user_id
         JOIN Musical M ON M.partner_id = P.partner_id
        WHERE U.user_name = #{user_name} and M.approved=0
        

    </select>
    

    <!-- 뮤지컬 제목으로 검색 -->
    <select id="getMusicalByTitle"  resultType="com.itwillbs.domain.MusicalDTO">
    SELECT  U.user_name, M.title
           FROM Partner P
       JOIN User U ON  P.user_id = U.user_id
         JOIN Musical M ON M.partner_id = P.partner_id
        WHERE M.title = #{title} and M.approved=0
    </select>
    
    <select id="getMusical" resultType="com.itwillbs.domain.MusicalDTO">
		select * 
		from Partner P
		JOIN User U ON  P.user_id = U.user_id
         JOIN Musical M ON M.partner_id = P.partner_id
		WHERE M.title = #{title}
		
	</select>

</mapper>